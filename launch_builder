#!/bin/bash

if [ "$UID" -ne 0 ]
then
    CALLER_USER=`whoami`  
    uid=$(id -u ${CALLER_USER})
    gid=$(id -g ${CALLER_USER})
    sudo gid=$gid uid=$uid CALLER_USER=${CALLER_USER}  WORKSPACE=${WORKSPACE} "$0" "$@"
    exit
else
    if [ -z "$CALLER_USER" ]
    then 
        echo "****** Please use non-root account  and without sudo"
        exit
    fi
fi

#Check if docker can be started wthout sudo
echo "*** Please ensure user name is added to docker group"
echo "*** you should be able to start stop docker without sudo"
#https://medium.com/devgorilla/how-to-install-docker-on-ubuntu-18-04-495216a16092

#TOD0
INSTALLATION_PATH="/usr/local/bin/vpp_builder"
#copy ssh-id and misc
if [ ! "$(readlink -f $0)" == "$INSTALLATION_PATH" ]
then
    echo "  Installing in $(readlink -f $0)   $INSTALLATION_PATH"
    cp "$(readlink -f $0)"  $INSTALLATION_PATH
    exit
fi

if [ -z $WORKSPACE ];
then
	echo "  Please export WORKSPACE directory which has build env as well"
	exit
else
	MOUNT_DIR=$WORKSPACE
fi

create_builder=0
start_builder=0
pause_builder=0
delete_builder=0
connect_builder=0

# read the options
OPTION=`getopt -o cspdhn --long create,start,pause,delete,help,connect -- "$@"`
eval set -- "$OPTION"
#Following are the options 
while true; do
    case "$1" in
        -c| --create ) 
            create_builder=1
            shift;;
        -i| --start )
            start_builder=1
            shift;;
        -n|--connect)
            connect_builder=1
            shift 1;;
        -s|--pause) 
            pause_builder=1 
            shift;;
        -d|--delete)
            delete_builder=1
            shift;;
        -h|--help) 
            echo "Usage"
            echo "      $0  --create          :Create the builder "   
            echo "      $0  --start           :Starts the builder "
            echo "      $0  --connect         :Connect to builder"
            echo "      $0  --delete          :Delete  the builder "
            echo "      $0  --pause           :Stop the builder  "
            exit ;;
        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

remove_container() {
	#Cleanup all containers on the host (dead or alive).
	if [ -z "$1" ]; then 
		echo "Please supply container name"
        return 1
	else
		docker stop $1 > /dev/null 2>&1
		docker rm $1   > /dev/null 2>&1
        return 0
	fi
}

create_container() {
        if [ -z "$1" ]; then 
                echo "Please supply container name"
        fi
        export container_name=$1
        
        echo "  Removing any build any older build environment"
        docker stop  $container_name
        docker rm    $container_name
        docker run                                          \
                --privileged                                \
                -v $MOUNT_DIR:$MOUNT_DIR                    \
                --name $container_name                      \
                -u ${NAME}                                  \
                -v $VPP_DIR:/vpp                            \
                -v /var/run/docker.sock:/var/run/docker.sock\
                -td $DOCKER_IMAGE_NAME                      \
                /bin/bash 
            
        echo "  fixing the image ...."
        docker exec -it $container_name /bin/bash -c "  \
                        mkdir -p  /home/gyan;           \
                        touch /etc/passwd;              \
                        touch /etc/group;               \
                        groupadd $gid;                  \
                        hostname $container_name;       \
                        useradd -rm -d /home/$NAME -s   \
                        /bin/bash -g $gid  -G sudo  -u  \
                        $uid $NAME;                     \
                        chown $uid:$gid /home/$NAME;    \
                        echo $NAME:U6aMy0wojraho |  chpasswd -e ;\
                        echo \"$NAME ALL=(ALL) NOPASSWD:ALL\" >> /etc/sudoers "
}
        
start_container() {
    if [ -z "$1" ]; then 
        echo "Please supply container name"
    fi
    docker run                                          \
            -v $MOUNT_DIR:$MOUNT_DIR                    \
            -u ${NAME}                                  \
            --name $container_name                      \
            -v $VPP_DIR:/vpp                            \
            -v /var/run/docker.sock:/var/run/docker.sock\
            -td $DOCKER_IMAGE_NAME                      \
            /bin/bash 
}


connect_container() {
    if [ -z "$1" ]; then 
                echo "Please supply container name"
    fi
    export container_name=$1
    docker exec -u $NAME -it $container_name  "/bin/bash"
}


stop_container() {
    if [ -z "$1" ]; then 
                echo "Please supply container name"
    fi
    export container_name=$1
    docker stop  --name $container_name 
}



VPP_DIR=$WORKSPACE/vpp/
DOCKER_IMAGE="granjan/vpp-build-env:four"
mkdir -p  $WORKSPACE
VPP_WS="/home/${CALLER_USER}/VPP-WS/"
VPP_WS_KITCHEN="KITCHEN"
export KITCHEN="$WORKSPACE/$VPP_WS_KITCHEN"
export MOUNT_DIR=$MOUNT_DIR
export VPP_DIR=$VPP_DIR 
export NAME=$CALLER_USER
export uid=$uid
export gid=$gid
export DOCKER_IMAGE_NAME=granjan/vpp-build-env:four
mkdir -p $KITCHEN
chown $uid:$gid $KITCHEN
#Copy important files to the kitchen 
if [ $create_builder -eq 1 ]; then
    remove_container "builder"
    create_container "builder"

fi

if [ $start_builder -eq 1 ]; then
    start_container "builder"
fi


if [ $pause_builder -eq 1 ]; then
    stop_container "builder"
fi


if [ $delete_builder -eq 1 ]; then
    remove_container "builder"
fi

if [ $connect_builder -eq 1 ]; then
    connect_container  "builder"
fi

 
